// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: like.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FavoriteServiceClient is the client API for FavoriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteServiceClient interface {
	FavoriteVideoAction(ctx context.Context, in *FavoriteVideoActionReq, opts ...grpc.CallOption) (*FavoriteVideoActionRsp, error)
	FavoriteCommentAction(ctx context.Context, in *FavoriteCommentActionReq, opts ...grpc.CallOption) (*FavoriteCommentActionRsp, error)
	GetFavoriteVideoIdList(ctx context.Context, in *GetFavoriteVideoIdListReq, opts ...grpc.CallOption) (*GetFavoriteVideoIdListRsp, error)
	IsFavoriteVideoDict(ctx context.Context, in *IsFavoriteVideoDictReq, opts ...grpc.CallOption) (*IsFavoriteVideoDictRsp, error)
	IsFavoriteCommentDict(ctx context.Context, in *IsFavoriteCommentDictReq, opts ...grpc.CallOption) (*IsFavoriteCommentDictRsp, error)
	GetCommentLikeSum(ctx context.Context, in *CommentLikeSumReq, opts ...grpc.CallOption) (*CommentLikeSumRsq, error)
	GetVideoLikeSum(ctx context.Context, in *VideoLikeSumReq, opts ...grpc.CallOption) (*VideoLikeSumRsq, error)
}

type favoriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteServiceClient(cc grpc.ClientConnInterface) FavoriteServiceClient {
	return &favoriteServiceClient{cc}
}

func (c *favoriteServiceClient) FavoriteVideoAction(ctx context.Context, in *FavoriteVideoActionReq, opts ...grpc.CallOption) (*FavoriteVideoActionRsp, error) {
	out := new(FavoriteVideoActionRsp)
	err := c.cc.Invoke(ctx, "/FavoriteService/FavoriteVideoAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) FavoriteCommentAction(ctx context.Context, in *FavoriteCommentActionReq, opts ...grpc.CallOption) (*FavoriteCommentActionRsp, error) {
	out := new(FavoriteCommentActionRsp)
	err := c.cc.Invoke(ctx, "/FavoriteService/FavoriteCommentAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) GetFavoriteVideoIdList(ctx context.Context, in *GetFavoriteVideoIdListReq, opts ...grpc.CallOption) (*GetFavoriteVideoIdListRsp, error) {
	out := new(GetFavoriteVideoIdListRsp)
	err := c.cc.Invoke(ctx, "/FavoriteService/GetFavoriteVideoIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) IsFavoriteVideoDict(ctx context.Context, in *IsFavoriteVideoDictReq, opts ...grpc.CallOption) (*IsFavoriteVideoDictRsp, error) {
	out := new(IsFavoriteVideoDictRsp)
	err := c.cc.Invoke(ctx, "/FavoriteService/IsFavoriteVideoDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) IsFavoriteCommentDict(ctx context.Context, in *IsFavoriteCommentDictReq, opts ...grpc.CallOption) (*IsFavoriteCommentDictRsp, error) {
	out := new(IsFavoriteCommentDictRsp)
	err := c.cc.Invoke(ctx, "/FavoriteService/IsFavoriteCommentDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) GetCommentLikeSum(ctx context.Context, in *CommentLikeSumReq, opts ...grpc.CallOption) (*CommentLikeSumRsq, error) {
	out := new(CommentLikeSumRsq)
	err := c.cc.Invoke(ctx, "/FavoriteService/GetCommentLikeSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) GetVideoLikeSum(ctx context.Context, in *VideoLikeSumReq, opts ...grpc.CallOption) (*VideoLikeSumRsq, error) {
	out := new(VideoLikeSumRsq)
	err := c.cc.Invoke(ctx, "/FavoriteService/GetVideoLikeSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoriteServiceServer is the server API for FavoriteService service.
// All implementations must embed UnimplementedFavoriteServiceServer
// for forward compatibility
type FavoriteServiceServer interface {
	FavoriteVideoAction(context.Context, *FavoriteVideoActionReq) (*FavoriteVideoActionRsp, error)
	FavoriteCommentAction(context.Context, *FavoriteCommentActionReq) (*FavoriteCommentActionRsp, error)
	GetFavoriteVideoIdList(context.Context, *GetFavoriteVideoIdListReq) (*GetFavoriteVideoIdListRsp, error)
	IsFavoriteVideoDict(context.Context, *IsFavoriteVideoDictReq) (*IsFavoriteVideoDictRsp, error)
	IsFavoriteCommentDict(context.Context, *IsFavoriteCommentDictReq) (*IsFavoriteCommentDictRsp, error)
	GetCommentLikeSum(context.Context, *CommentLikeSumReq) (*CommentLikeSumRsq, error)
	GetVideoLikeSum(context.Context, *VideoLikeSumReq) (*VideoLikeSumRsq, error)
	mustEmbedUnimplementedFavoriteServiceServer()
}

// UnimplementedFavoriteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteServiceServer struct {
}

func (UnimplementedFavoriteServiceServer) FavoriteVideoAction(context.Context, *FavoriteVideoActionReq) (*FavoriteVideoActionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteVideoAction not implemented")
}
func (UnimplementedFavoriteServiceServer) FavoriteCommentAction(context.Context, *FavoriteCommentActionReq) (*FavoriteCommentActionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteCommentAction not implemented")
}
func (UnimplementedFavoriteServiceServer) GetFavoriteVideoIdList(context.Context, *GetFavoriteVideoIdListReq) (*GetFavoriteVideoIdListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteVideoIdList not implemented")
}
func (UnimplementedFavoriteServiceServer) IsFavoriteVideoDict(context.Context, *IsFavoriteVideoDictReq) (*IsFavoriteVideoDictRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFavoriteVideoDict not implemented")
}
func (UnimplementedFavoriteServiceServer) IsFavoriteCommentDict(context.Context, *IsFavoriteCommentDictReq) (*IsFavoriteCommentDictRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFavoriteCommentDict not implemented")
}
func (UnimplementedFavoriteServiceServer) GetCommentLikeSum(context.Context, *CommentLikeSumReq) (*CommentLikeSumRsq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentLikeSum not implemented")
}
func (UnimplementedFavoriteServiceServer) GetVideoLikeSum(context.Context, *VideoLikeSumReq) (*VideoLikeSumRsq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoLikeSum not implemented")
}
func (UnimplementedFavoriteServiceServer) mustEmbedUnimplementedFavoriteServiceServer() {}

// UnsafeFavoriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteServiceServer will
// result in compilation errors.
type UnsafeFavoriteServiceServer interface {
	mustEmbedUnimplementedFavoriteServiceServer()
}

func RegisterFavoriteServiceServer(s grpc.ServiceRegistrar, srv FavoriteServiceServer) {
	s.RegisterService(&FavoriteService_ServiceDesc, srv)
}

func _FavoriteService_FavoriteVideoAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteVideoActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).FavoriteVideoAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FavoriteService/FavoriteVideoAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).FavoriteVideoAction(ctx, req.(*FavoriteVideoActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_FavoriteCommentAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteCommentActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).FavoriteCommentAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FavoriteService/FavoriteCommentAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).FavoriteCommentAction(ctx, req.(*FavoriteCommentActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_GetFavoriteVideoIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteVideoIdListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).GetFavoriteVideoIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FavoriteService/GetFavoriteVideoIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).GetFavoriteVideoIdList(ctx, req.(*GetFavoriteVideoIdListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_IsFavoriteVideoDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFavoriteVideoDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).IsFavoriteVideoDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FavoriteService/IsFavoriteVideoDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).IsFavoriteVideoDict(ctx, req.(*IsFavoriteVideoDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_IsFavoriteCommentDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFavoriteCommentDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).IsFavoriteCommentDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FavoriteService/IsFavoriteCommentDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).IsFavoriteCommentDict(ctx, req.(*IsFavoriteCommentDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_GetCommentLikeSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentLikeSumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).GetCommentLikeSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FavoriteService/GetCommentLikeSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).GetCommentLikeSum(ctx, req.(*CommentLikeSumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_GetVideoLikeSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoLikeSumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).GetVideoLikeSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FavoriteService/GetVideoLikeSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).GetVideoLikeSum(ctx, req.(*VideoLikeSumReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FavoriteService_ServiceDesc is the grpc.ServiceDesc for FavoriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavoriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FavoriteService",
	HandlerType: (*FavoriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FavoriteVideoAction",
			Handler:    _FavoriteService_FavoriteVideoAction_Handler,
		},
		{
			MethodName: "FavoriteCommentAction",
			Handler:    _FavoriteService_FavoriteCommentAction_Handler,
		},
		{
			MethodName: "GetFavoriteVideoIdList",
			Handler:    _FavoriteService_GetFavoriteVideoIdList_Handler,
		},
		{
			MethodName: "IsFavoriteVideoDict",
			Handler:    _FavoriteService_IsFavoriteVideoDict_Handler,
		},
		{
			MethodName: "IsFavoriteCommentDict",
			Handler:    _FavoriteService_IsFavoriteCommentDict_Handler,
		},
		{
			MethodName: "GetCommentLikeSum",
			Handler:    _FavoriteService_GetCommentLikeSum_Handler,
		},
		{
			MethodName: "GetVideoLikeSum",
			Handler:    _FavoriteService_GetVideoLikeSum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "like.proto",
}
